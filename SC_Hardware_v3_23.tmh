//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// HARDWARE: JOYSTICK AXIS MAPPINGS //                                                                      // Define All Axis Curves/Trim/Deadzones for Device //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

// Set Default Joystick Axis
    int initJoystickAxis()
    {
        MapAxis(&Joystick,         JOYX,    DX_X_AXIS,    AXIS_NORMAL, MAP_ABSOLUTE);  // Set Joystick Control X Axis
        MapAxis(&Joystick,         JOYY,    DX_Y_AXIS,    AXIS_NORMAL, MAP_ABSOLUTE);  // Set Joystick Control Y Axis
        MapAxis(&Joystick,            0, MOUSE_X_AXIS,    AXIS_NORMAL, MAP_ABSOLUTE);  // Bind to Null Un Used
        MapAxis(&Joystick,            0, MOUSE_Y_AXIS,    AXIS_NORMAL, MAP_ABSOLUTE);
        MapAxis(&Joystick,            0, MOUSE_Z_AXIS,    AXIS_NORMAL, MAP_RELATIVE);

      if(CenterJoystickMount){  //  Rotate Joystick Axis to account for center mounting position
            RotateDXAxis(DX_X_AXIS, DX_Y_AXIS, JoystickAngle);
            if(DebugMode | DebugMMode) printf("Rotate Joystick Axis [%d]ï¿½ CCW(-) or CW to account center mounting position\x0a",JoystickAngle);
      }
    }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// HARDWARE: JOYSTICK AXIS CURVES                                                                           // Define All Axis Curves/Trim/Deadzones for Device //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//Joystick Curve Profile Three different presets are selectable On The Fly (FLAP position)
    int initSetJoystickCurves()
    {
          if(Throttle[FLAPU])             vJoystickCurveProfile = 0;    // Flaps UP
          else if(Throttle[FLAPD])        vJoystickCurveProfile = 2;    // Flaps DOWN
          else                            vJoystickCurveProfile = 1;    // Flaps MIDDLE
        initJoystickCurves();
    }

//Joystick Curve Initialising
    int initJoystickCurves()
    {
        float Zsc;	//Zoom Scale Curve Correction
        
        if(CenterJoystickMount) Zsc = ZoomScale(JoystickAngle);         //Center Joystick mount : check the Joystick angle
            else                Zsc = 0;                                //else angle should be 0

        SetSCurve(&Joystick, JOYX, 0,         JS_DEADZONE, 0, JS_CURVE[vJoystickCurveProfile], JS_ZOOM[vJoystickCurveProfile]+Zsc);
        SetSCurve(&Joystick, JOYY, 0,         JS_DEADZONE, 0, JS_CURVE[vJoystickCurveProfile], JS_ZOOM[vJoystickCurveProfile]+Zsc);
        SetSCurve(&Throttle,  SCX, 0,         MS_DEADZONE, 0,                MS_CURVE,                                  MS_ZOOM);
        SetSCurve(&Throttle,  SCY, 0,         MS_DEADZONE, 0,                MS_CURVE,                                  MS_ZOOM);
        if (DebugMode){
            if(CenterJoystickMount & JoystickAngle != 0){
                printf("Set	Joystick Curve Profile [%d]: Curve = [%d], Zoom = [%d]+Zsc[%f]\x0a", vJoystickCurveProfile, JS_CURVE[vJoystickCurveProfile], JS_ZOOM[vJoystickCurveProfile], Zsc);
            }
            else{
                printf("Set	Joystick Curve Profile [%d]: Curve = [%d], Zoom = [%d]\x0a", vJoystickCurveProfile, JS_CURVE[vJoystickCurveProfile], JS_ZOOM[vJoystickCurveProfile]);
            }
            printf("Set	Slew     Curve Profile [%d]: Curve = [%d], Zoom = [%d]\x0a", vJoystickCurveProfile, SL_CURVE[vJoystickCurveProfile], SL_ZOOM[vJoystickCurveProfile]);
        }
    }

    //Joystick Optimal ZoomScale (to reach the corner of the axes when Joystick is Rotated : Center Mount posisiton)

    float ZoomScale(float ang)
    {
        ang = ang * 3.1415926 / 180;                            // convert angle from degrees into radians
        return 2 / ln(2) * ln(abs(cos(ang) + abs(sin(ang))));   // returns the optimal zoom scale
    }

    int toggle_fire_group(){
       // int secondary_fire = 0;
        if (Throttle[RDRNRM]) {                                 // Normal
        MapKey(&Joystick, TG1, attack1_group1);                 // fire group 1
        MapKey(&Joystick, TG2, attack1_group2);
            if (DebugMode) printf("RDRNRM: Weapon Group 1 on TG1, Weapon Group 2 on H4P\x0a");
    }
        else {
            MapKey(&Joystick, TG1, attack1_group2);             // fire group 2
            MapKey(&Joystick, TG2, attack1_group1);
            if (DebugMode) printf("RDRDIS: Weapon Group 2 on TG1, Weapon Group 1 on H4P\x0a");
        }
    }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// HARDWARE: THROTTLE AXIS MAPPINGS //                                                                      // Define All Axis Curves/Trim/Deadzones for Device //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    //Set Default Throttle Axis
    int initThrottleAxis()
    {
        MapAxis(&Throttle, THR_RIGHT,        DX_Z_AXIS,     AXIS_REVERSED, MAP_ABSOLUTE);           // Set Right Throttle
        MapAxis(&Throttle,  THR_LEFT,     DX_ZROT_AXIS,     AXIS_REVERSED, MAP_ABSOLUTE);           // Set Left Throttle / DX_ZROT_AXIS
        MapAxis(&Throttle,    THR_FC,   DX_SLIDER_AXIS,     AXIS_NORMAL, MAP_ABSOLUTE);             // Set Vert Strafe
        MapAxis(&Throttle,       SCX,     DX_XROT_AXIS,       AXIS_NORMAL, MAP_ABSOLUTE);
        MapAxis(&Throttle,       SCY,     DX_YROT_AXIS,     AXIS_REVERSED, MAP_ABSOLUTE);
    }

    int SetThrottle()   // Not called just here for reference for call to update pos
    {
        DXAxis(DX_Z_AXIS, -AxisVal(Throttle[THR_RIGHT], &axdata));
    }

// Set Throttle Curve two different presets are selectable On The Fly  //
    int initSetThrottleCurves()
    {
        initCurveThrottleRight();
        initCurveThrottleLeft();
        SetSCurve(&Throttle, THR_FC, 0, 0, 0, SLIDER_FINE_CTL_CURVE, SLIDER_FINE_CTL_ZOOM);
        if(DebugMode) printf("Set	Throttle Curve Profile [%d]\x0a", vThrottleCurveProfile);
    }

    int initCurveThrottleRight()
    {
        DXSetAxis(DX_Z_AXIS, AxisVal(Throttle[DX_THROTTLE_AXIS], &axdata));
        SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
        SetJCurve(&Throttle, THR_RIGHT, 70, 50);  // smooth
    }

    int initCurveThrottleLeft()
    {
        DXSetAxis(DX_ZROT_AXIS, AxisVal(Throttle[THR_LEFT], &axdata));
        MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
        SetSCurve(&Throttle, THR_LEFT, 0, THR_L_STRAFE_DEADZONE, 0, THR_L_STRAFE_CURVE, 0);  // Normal
    }

    int set_throttle_norm()
    {
        DXSetAxis(DX_Z_AXIS, AxisVal(Throttle[DX_THROTTLE_AXIS], &axdata));
         MapAxis(&Throttle, THR_RIGHT,DX_Z_AXIS,AXIS_REVERSED, MAP_ABSOLUTE);
        SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
        SetJCurve(&Throttle, THR_RIGHT, 70, 50);  // smooth
    }

    int set_throttle_strafe()
    {
        DXSetAxis(DX_THROTTLE_AXIS, AxisVal(Throttle[THR_RIGHT], &axdata));
        MapAxis(&Throttle, THR_RIGHT, DX_THROTTLE_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
        SetSCurve(&Throttle, THR_RIGHT, 0, THR_STRAFE_DEADZONE, 0, THR_STRAFE_CURVE, 0);  // Normal
    }


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// HARDWARE: RUDDER PEDAL AXIS MAPPINGS                                                                      //Define All Axis Curves/Trim/Deadzones for Device //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    int initT1600Left()
    {
        
    }

    int initTFRPRudder()
    {                                                       // Initialise Thrustmaster TFRP (T.Flight T16000) Toe Pedal Axes (When enabled in Settings)
        SetSCurve(&TFRPRudder,  TRUDDER, 0, 10, 0, 0, 0);                        //Rudder Pedals
        SetSCurve(&TFRPRudder, TRPRIGHT, 0, 0, 20, 0, 0);                        // Right Toe Brake
        SetSCurve(&TFRPRudder,  TRPLEFT, 0, 0, 20, 0, 0);                        // Left  Toe Brake
    }

    int initTFRPHARudder()
    {                                                    // Initialise Thrustmaster TFRPHA (T.Flight TPR) Toe Pedal Axes (When enabled in Settings)
        SetSCurve(&TFRPHARudder, TFRPHA_RIGHT, 0, 0, 20, 0, 0);                 // Right Toe Brake
        SetSCurve(&TFRPHARudder,  TFRPHA_LEFT, 0, 0, 20, 0, 0);                 // Left  Toe Brake
    }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// HARDWARE: MFD CONTROLS                                                                                                                                       //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    int initLeftMFD()
    {                                                         // Set Left MFD
    // HUD Management
        MapKey(&LMFD, GAINU, 0);
        MapKey(&LMFD, GAIND, 0);
        MapKey(&LMFD, OSB01, 0);
        MapKey(&LMFD, OSB02, 0);
        MapKey(&LMFD, OSB03, 0);
        MapKey(&LMFD, OSB04, 0);
        MapKey(&LMFD, SYMU, TEMPO(PULSE+mobiglass_scoreboard, PULSE+toggle_contact, 300));
        MapKey(&LMFD, SYMD,  0);
        MapKey(&LMFD, OSB06, 0);
        MapKey(&LMFD, OSB07, 0);
        MapKey(&LMFD, OSB08, TEMPO(0, self_destruct, EJECT_DELAY));  // Hold to self destruct
        MapKey(&LMFD, OSB09, 0);
        MapKey(&LMFD, OSB10, 0);
        MapKey(&LMFD, CONU, 0);
        MapKey(&LMFD, COND, 0);
        MapKey(&LMFD, OSB11, 0);
        MapKey(&LMFD, OSB12, 0);
        MapKey(&LMFD, OSB13, TEMPO(PULSE+toggle_qdrive_system, PULSE+toggle_qdrive_engagement, 300));
        MapKey(&LMFD, OSB14, PULSE+autoland);
        MapKey(&LMFD, OSB15, PULSE+toggle_landing_system);
        MapKey(&LMFD, BRTU, power_throttle_up);
        MapKey(&LMFD, BRTD, power_throttle_down);
        MapKey(&LMFD, OSB16, 0);
        MapKey(&LMFD, OSB17, 0);
        MapKey(&LMFD, OSB18, 0);
        MapKey(&LMFD, OSB19, PULSE+ifcs_toggle_safeties);
        MapKey(&LMFD, OSB20, PULSE+ifcs_toggle_esp);
        printf("Left MFD Configured\x0a"); 
    }

    int initRightMFD()
    {                                                           // Set Right MFD 
        MapKey(&RMFD, GAINU, PULSE+radar_cycle_zoom_fwd);
        MapKey(&RMFD, GAIND, 0);
        MapKey(&RMFD, OSB01, 0);
        MapKey(&RMFD, OSB02, 0);
        MapKey(&RMFD, OSB03, 0);
        MapKey(&RMFD, OSB04, 0);
        MapKey(&RMFD, OSB05, 0);
        MapKey(&RMFD, OSB06, 0);
        MapKey(&RMFD, OSB07, 0);
        MapKey(&RMFD, OSB08, 0);
        MapKey(&RMFD, OSB09, 0);
        MapKey(&RMFD, OSB10, 0);
        MapKey(&RMFD, OSB11, 0);
        MapKey(&RMFD, OSB12, 0);
        MapKey(&RMFD, OSB13, 0);
        MapKey(&RMFD, OSB14, 0);
        MapKey(&RMFD, OSB15, 0);
        MapKey(&RMFD, OSB16, 0);
        MapKey(&RMFD, OSB17, 0);
        MapKey(&RMFD, OSB18, 0);
        MapKey(&RMFD, OSB19, 0);
        MapKey(&RMFD, OSB20, 0);
        MapKey(&RMFD, BRTU, 0);
        MapKey(&RMFD, BRTD, 0);
        MapKey(&RMFD, CONU, 0);
        MapKey(&RMFD, COND, 0);
            printf("Right MFD Configured\x0a"); 
    }

    int initLEDStates()
    {
        if(HMD){                                                        //Initiate Throttle Backlight with HMD
            vThrottleLightBackup = ThrottleLightHMD;
            initBACKLIGHT(Throttle_BL, ThrottleLightHMD);
            if(DebugMode | DebugMMode) printf("HMD -> Backlight Throttle Set to %d\x0a", vThrottleLightBackup);
        }
        else{                                                           //Initiate Throttle Backlight without HMD
            vThrottleLightBackup = ThrottleLight;
            initBACKLIGHT(Throttle_BL, ThrottleLight);
            if(DebugMode | DebugMMode) printf("No HMD Or TrackIR -> Backlight Throttle Set to %d\x0a", vThrottleLightBackup);
        }
        GameOutput(&Throttle, OUT_ID_LED_1, 0);                         //set Throttle LED 1 OFF
        GameOutput(&Throttle, OUT_ID_LED_2, 0);                         //set Throttle LED 2 OFF
        GameOutput(&Throttle, OUT_ID_LED_3, 0);                         //set Throttle LED 3 OFF
        GameOutput(&Throttle, OUT_ID_LED_4, 0);                         //set Throttle LED 4 OFF
        GameOutput(&Throttle, OUT_ID_LED_5, 0);                         //set Throttle LED 5 OFF
        if(UseMFD > 0){
            vRMFDLightBackup = RMFDLight;
            initBACKLIGHT(RMFD_BL, RMFDLight);                          //Set right MFD Backlight
            if(DebugMode | DebugMMode) printf("Backlight Right MFD Set to %d\x0a", RMFDLight);
            GameOutput(&RMFD, OUT_ID_LED_1, 0);                         //set right MFD LED 1 OFF
            GameOutput(&RMFD, OUT_ID_LED_2, 0);                         //set right MFD LED 2 OFF
        }
        if(UseMFD > 1){
            vLMFDLightBackup = LMFDLight;
            initBACKLIGHT(LMFD_BL, LMFDLight);                          //Set left MFD Backlight
            if(DebugMode | DebugMMode) printf("Backlight Left  MFD Set to %d\x0a", LMFDLight);
            GameOutput(&LMFD, OUT_ID_LED_1, 0);                         //set left MFD LED 1 OFF
            GameOutput(&LMFD, OUT_ID_LED_2, 0);                         //set left MFD LED 2 OFF
        }

        //Initiate LED State
        initLED(CombinedFire_LED, sCombinedFire);
        initLED(PTT_LED, sPTTState);
        initLED(VoicePTT_LED, vVoicePTT);
        initLED(PTTMode_LED, sPTTMode);
        initLED(VA_LED, sVoiceAttack);
        initLED(ReverseThrottle_LED, sRT);
        initLED(Camera_LED, sCameraMode);
        initLED(HeadLook_LED, sHeadLook);
        initLED(NVidiaCaptureVideo_LED, sNVidiaCaptureVideo);
        initLED(AMDCaptureVideo_LED, sAMDCaptureVideo);
        initLED(NVidiaStreaming_LED, sNVidiaStreaming);
        initLED(AMDStreaming_LED, sAMDStreaming);

        init_PANIC_LED(100);
    }