//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// INCLUDED FILES                                                                                                                                               //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

include "target.tmh"
include "SC_USBKeyMap.ttm"
include "SC_KeyMap_v3_24.ttm"
include "SC_Variables_v3_24.tmh"
include "SC_UserPrefs_v3_24.tmh"
include "SC_Defaults_v3_24.tmh"
include "SC_Hardware_v3_24.tmh"
include "SC_Functions_v3_24.tmh"
include "SC_Macros_v3_24.tmh"
include "SC_LED_v3_24.tmh"
include "SC_Warthog_throttle.tmh"
include "SC_Warthog_Stick_F16.tmh"
include "SC_AVA_Stick_F16.tmh"



//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// START-UP:  / MAIN                                                                                                                                            //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

int main()
    {

    // Configure(&T16000, MODE_EXCLUDED);          //Enable here and Bindings are at the end of this file
    // Configure(&T16000L, MODE_EXCLUDED);         // Left Stick settings below would need to be duplicated this is not implemented
    Configure(&HCougar, MODE_EXCLUDED);
    Configure(&JoystickF18, MODE_EXCLUDED);
    Configure(&A320Pilot, MODE_EXCLUDED);
    Configure(&A320Copilot, MODE_EXCLUDED);
    Configure(&TCAQuadrant12, MODE_EXCLUDED);
    Configure(&TCAQuadrant34, MODE_EXCLUDED);
    Configure(&TCAYokeBoeing, MODE_EXCLUDED);
    Configure(&TCAQBoeing12, MODE_EXCLUDED);
    Configure(&TCAQBoeing34, MODE_EXCLUDED);
    Configure(&TCASidestickXPilot, MODE_EXCLUDED);
    Configure(&TCASidestickXCopilot, MODE_EXCLUDED);
    Configure(&ViperTQS, MODE_EXCLUDED);
    Configure(&ViperBBox, MODE_EXCLUDED);
    Configure(&AVA_F18, MODE_EXCLUDED);
    Configure(&FarmStickRight, MODE_EXCLUDED);
    Configure(&FarmStickLeft, MODE_EXCLUDED);
    Configure(&TFRPRudder, MODE_EXCLUDED);
    Configure(&TWCSThrottle, MODE_EXCLUDED);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//  BASE SETTINGS                                                                                                                                               //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    SetKBRate(PulseTime, DelayTime);
    SetKBLayout(KBLayout);

    // FUNCTION START

    initPrintState();

    // End Init And Unlock Control

    StartupLock = 0;

    // Exclude Un-Initialized MFD

    if (UseMFD == 0)
    {
        Configure(&LMFD, MODE_EXCLUDED);
        Configure(&RMFD, MODE_EXCLUDED);
    }

    // Initialize Pedal Assignments
    // This is not used Filter mode to apply custum curves is causing axix home problems
    // Home of Crazy Ivan
    // Rudders=0 is used for all until a fix can be found

    //if (RUDDERS == 3)
    //{
    //    Configure(&TFRPRudder, MODE_EXCLUDED);
    //    Configure(&TFRPHARudder, MODE_FILTERED);
    //}
    //else if (RUDDERS == 2)
    //{
    //    Configure(&TFRPHARudder, MODE_EXCLUDED);
    //    Configure(&TFRPRudder, MODE_FILTERED);
    //}
    //else if (RUDDERS == 1)
    //{
    //    Configure(&TFRPRudder, MODE_EXCLUDED);
    //    Configure(&TFRPHARudder, MODE_EXCLUDED);
    //}
    //else
    //{
    //    Configure(&TFRPRudder, MODE_EXCLUDED);
    //    Configure(&TFRPHARudder, MODE_EXCLUDED);
    //}

Configure(&TFRPRudder, MODE_EXCLUDED);
Configure(&TFRPHARudder, MODE_EXCLUDED);

// Configure(&Joystick, MODE_EXCLUDED);
// Configure(&AVA_F16, MODE_EXCLUDED);



    
    if (Init(&EventHandle))
        return 1;


// -------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Initialize MFD Assignments                                                                                                                                   //
// -------------------------------------------------------------------------------------------------------------------------------------------------------------//

    if (UseMFD > 0)
    {
        if (DebugMode | DebugMMode) printf("Initialising Right MFD\x0a");
        initRightMFD();
    }
    if (UseMFD > 1)
    {
        if (DebugMode | DebugMMode) printf("Initialising Left  MFD\x0a");
        initLefthtMFD();
    }

// -------------------------------------------------------------------------------------------------------------------------------------------------------------//
// Initialize the Joystick & Throttle AXIS Assignments                                                                                                          //
// -------------------------------------------------------------------------------------------------------------------------------------------------------------//

    initJoystickAxis();         // Bind Stick Axis
    initSetJoystickCurves();    // Init using custom curves
    initThrottleAxis();         //
    initSetThrottleCurves();    // Init Custom Curves

    initLEDStates();
    initLEDController(3);       // Start LED Lighting
    initJoystickF16();
    initJoystickAVAF16();
    initThrottle();


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//  MAP THROTTLE ARM CONTROLS                                                                                                                                   //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//  Strafe Up/Down/Lateral Should be mapped to Axis in game to Throttle mouse in all configurations.

// If RUDDER is 0:

    if (!RUDDERS)
    {
        printf("No rudders.. set in config Roll must be manuall mapped\x0a");

    }

}



//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//  EVENT HANDLER                                                                                                                                               //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

int EventHandle(int type, alias o, int x)
    {

    int dev = x;
    int THR_FC_AxisLight;

    // Throttle & MFD : On-The-FLy Backlight Control
    if(&o == &Throttle & x == THR_FC &Joystick[S4])      //HOLD S4 on Joystick & Move Throttle Friction Control Axis
    {
        THR_FC_AxisLight = (AxisVal(Throttle[THR_FC], &axdata) - 32766) / 256 * -1;
        vThrottleLightBackup = THR_FC_AxisLight;
        vRMFDLightBackup     = THR_FC_AxisLight;
        vLMFDLightBackup     = THR_FC_AxisLight;
        initBACKLIGHT(Throttle_BL, vThrottleLightBackup);
        initBACKLIGHT(RMFD_BL, vRMFDLightBackup);
        initBACKLIGHT(LMFD_BL, vLMFDLightBackup);
    }

// This Takes Axis Data from Connected Controllers and Passes Through Axis to bypass 8 Axis DX Limit
// Also Applies Custom Curves to match Stick and Throttle to exported axis

//    if (&o == &TFRPRudder)
//  {
//
//      GetAxisData(&o, x);
//        if (axdata.val == TRPRIGHT)
//            dev = TRPRIGHT;
//        else if (axdata.val == TRPLEFT)
//            dev = TRPLEFT;
//
//        axdata.val = AxisVal(o[x], &axdata);
//        GameOutput(&o, dev, AxisVal(o[x], &axdata));
//        return 0;
//    }
//    else if (&o == &TFRPHARudder)
//    {
//
 //       GetAxisData(&o, x);
 //       if (axdata.val == TFRPHA_RIGHT)
//            dev = TFRPHA_RIGHT;
//        else if (axdata.val == TFRPHA_LEFT)
//            dev = TFRPHA_LEFT;
//        else if (axdata.val == TFRPHA_RUDDER)
//            dev = TFRPHA_RUDDER;

//        axdata.val = AxisVal(o[x], &axdata);
//        GameOutput(&o, dev, AxisVal(o[x], &axdata));
//        return 0;
//    }
//    else if (&o == &T16000)
//    {

//        GetAxisData(&o, x);
//        if (axdata.val == JOYY)
//            dev = JOYY;
//        else if (axdata.val == JOYX)
//            dev = JOYX;
//        else if (axdata.val == THROTTLE)
//            dev = THROTTLE;
//        else if (axdata.val == RUDDER)
//            dev = RUDDER;

//        axdata.val = AxisVal(o[x], &axdata);
//        GameOutput(&o, dev, AxisVal(o[x], &axdata));
 //       return 0;
//    }
    DefaultMapping(&o, x);
}