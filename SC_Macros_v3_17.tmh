//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// START-UP: MACRO VARIABLE INITALISATION //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    int mSignalLights, mSignalLightsLong;
    int mJumpMidSubSys, mJumpPrevSubSys, mJumpNextSubSys;
    int mThrottleFwdOnly, mThrottleFullScale, mThrottlePrecision, mThrottleTrimmed, mThrottleFullNonLinear, mThrottleFwdNonLinear, mThrottleFullScaleCustom;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MACROS: THROTTLE TRIM SEQUENCES //                                            // MACROS Include a series of automated key presses to perform a specific task.//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//


// TODO convert current Throttle implementation to macros for 

        int initSetThrottleCustomCurves() 
        {
        mThrottleFwdOnly         = EXEC(                                                        // Initialising Throttle Forward Only Preset (SRV etc)
                                "TrimDXAxis(DX_Z_AXIS, SET(-1024));"                            // *TrimDXAxis(axis, +/-1024) trim is additive, SET forces trim value, CURRENT reads axis.pos
                                "SetSCurve(&Throttle, THR_RIGHT, 0, -100, 0, 0);"               // *SetSCurve(&Device, axis, left_deadzone%, center_deadzone%, right_deadzone%, curve(-20...20), scale)
                                "printf(\"Throttle Profile: FORWARD ONLY [0 -> 100]\\x0a\");"
                                "SetThrottle();");
        mThrottleFullScale       = EXEC(                                                        // Make Throttle Linear & Full Scale	(Default: Full Range)
                                "TrimDXAxis(DX_Z_AXIS, SET(0));"                                // Initialising Throttle Full Scale Preset 
                                "SetSCurve(&Throttle, THR_RIGHT, 0, 5, 0, 0);"                  // ..(Alternative= "SetJCurve(&Throttle, THR_RIGHT, 50, 50);")
                                "printf(\"Throttle Profile: FULL SCALE [-100 -> 100]\\x0a\");"
                                "SetThrottle();");                                              // *SetJCurve(&device, axis, physical axis value%, DirectX output value%)
        mThrottlePrecision       = EXEC(                                                        // Initialising Throttle Precision Preset (Docking etc)
                                "TrimDXAxis(DX_Z_AXIS, SET(0));"                                // Allows Throttle Movement ONLY to the middle 
                                "SetSCurve(&Throttle, THR_RIGHT, 0, 2, 0, 2, -2);"
                                "printf(\"Throttle Profile: PRECISION [-50 -> 50]\\x0a\");"
                                "SetThrottle();");
        mThrottleTrimmed         = EXEC(                                                        // Initialising Throttle Trimmed 25% @ Beginning/End Preset (ALTERNATIVE)
                                "TrimDXAxis(DX_Z_AXIS, SET(0));"
                                "SetSCurve(&Throttle, THR_RIGHT, -25, 0, -25, 0);"
                                "printf(\"Throttle Profile: TRIMMED [-75 -> 75]\\x0a\");"
                                "SetThrottle();");
        mThrottleFullNonLinear	 = EXEC(                                                        // Initialising Throttle 
                                "TrimDXAxis(DX_Z_AXIS, SET(0));"
                                "SetCustomCurve(&Throttle, THR_RIGHT, AxisCurveMod);"           // DX-SLIDER Non-Linear progression Curve
                                "printf(\"Throttle Profile: NON-LINEAR [-100 ~> 100]\\x0a\");"
                                "SetThrottle();");
        mThrottleFwdNonLinear	 = EXEC(                                                        // Initialising Throttle 
                                "TrimDXAxis(DX_Z_AXIS, SET(-1024));"
                                "SetCustomCurve(&Throttle, THR_RIGHT, AxisCurveMod);"           // DX-SLIDER Non-Linear progression Curve
                                "printf(\"Throttle Profile: NON-LINEAR FORWARD ONLY [0 ~> 100]\\x0a\");"
                                "SetThrottle();");
        mThrottleFullScaleCustom = EXEC(                                                        // Initialising Throttle Full Scale - Max Shorter @ 80% Preset (ALTERNATIVE)
                                "TrimDXAxis(DX_Z_AXIS, SET(0));"                                // Slightly Shorter Forward travel distance for Cockpit setup.
                                "SetJCurve(&Throttle, THR_RIGHT, 80, 100);"
                                "printf(\"Throttle Profile: FULL SCALE CUSTOM [-100 -> 80]\\x0a\");"
                                "SetThrottle();"); }



//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// MACROS: SPECIALISED SEQUENCES //                                             // MACROS Include a series of automated key presses to perform a specific task. //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    int initCustomMacroCommands()
        {
        mSignalLights = CHAIN(                                                                  // MACRO: Flash Ship/Lights (Standard)
            DOWN+ShipLights,            D(800),                                                 // Will turn lights on & off 3 times @ short intervals
            UP+ShipLights,              D(600),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights,              D(700),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights);
            
        mSignalLightsLong = CHAIN(                                                              // MACRO: Flash Ship/Lights (Long)
            DOWN+ShipLights,            D(800),                                                 // Will turn lights on & off 6 times @ short intervals
            UP+ShipLights,              D(600),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights,              D(700),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights,              D(750),
            DOWN+ShipLights,            D(1300),
            UP+ShipLights,              D(800),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights,              D(650),
            DOWN+ShipLights,            D(1000),
            UP+ShipLights);

        mJumpMidSubSys = CHAIN(                                                                 // Added Here as Template for Shifting Selections Laster
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back);

        mJumpPrevSubSys = CHAIN(                                                                // Needs Tested and Counts Adjusted 
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back,    D(),
            PULSE+target_cycle_subitem_back);

        mJumpNextSubSys = CHAIN(                                                                // Needs Tested and Counts Adjusted 
            PULSE+ target_cycle_subitem_fwd,    D(),
            PULSE+ target_cycle_subitem_fwd,    D(),
            PULSE+ target_cycle_subitem_fwd,    D(),
            PULSE+ target_cycle_subitem_fwd,    D(),
            PULSE+ target_cycle_subitem_fwd);

         }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//