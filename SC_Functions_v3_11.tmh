
int initToggleDecouple()
{
    ActKey(KEYON+PULSE+ifcs_toggle_vector_decoupling);
}

// Switch that governs behavior of Autopilot Engage button

define AP_SHORT 1
define AP_LONG 2
define AP_RELEASE 3

// t == AP_SHORT, AP_LONG or AP_RELEASE

// In PATH, Short press select scan mode. Long press generates active ping.
// In ALT/HDG Short press Mining Mode Long-press Flight Ready.
// In ALT, we toggle the landing gear. Long-press auto-lands.


    int initAPmode(int t)
    {

        if (t == AP_RELEASE) {
            ActKey(KEYON+UP+invoke_ping);
            ActKey(KEYON+UP+autoland);
            return 0;
        }
        if (Throttle[APPAT]) {
            if (t == AP_SHORT)
                ActKey(KEYON+PULSE+toggle_scan_mode);
            if (t == AP_LONG)
                ActKey(KEYON+DOWN++PULSE+invoke_ping);     // Released above
        } else if (Throttle[APAH]) {
            if (t == AP_SHORT)
                ActKey(KEYON+PULSE+toggle_mining_mode);
            if (t == AP_LONG)
                ActKey(KEYON+PULSE+flightready);    // AutoStart
        } else { // (Throttle[APALT])
            if (t == AP_SHORT)
                ActKey(KEYON+PULSE+toggle_landing_system);
            if (t == AP_LONG)
                ActKey(KEYON+DOWN+PULSE+autoland);        // Auto or Manual
        }
    }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//  FUNCTIONS: FIRE CONTROLS //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

    int initSetCombinedFire(int toggleValue)
    {                                                  // FUNCTION: Calculate Combined Fire Status (Default = ON (Combined))
        if(toggleValue) {                              // When disabled, Trigger 2 is independant 
            combinePriSecFire = !combinePriSecFire;}   // Not Implemented need to setup to work with toggle call
        if(combinePriSecFire){
            printf("Dual-Stage Trigger: Set to COMBINED Primary + Secondary Fire\x0a");
            // MapKey(&Joystick, TG2, CHAIN(PrimaryFire, SecondaryFire));
             }
        else {
            printf("Dual-Stage Trigger: Set to SEPARATE Fire\x0a");
            // MapKey(&Joystick, TG2, 0);
             }
    }

                                                                                         

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//            Voice       //------------------------------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//TOGGLE: Voice Attack Mic
    int initToggleVoiceAttackMic()
    {
        if(VoiceAttack){
            sVoiceAttack=!sVoiceAttack;
            ActKey(KEYON+PULSE+ToggleVoiceAttackMic);
            initLED(VA_LED, sVoiceAttack);
            if(DebugMode | DebugMMode) printf("Voice Attack Mic	[%d]	[MUTE:[1] UNMUTE:[0]]\x0a", sVoiceAttack);
        }
    }

    //TOGGLE: PTT/PTP
    int initTogglePTTPTP()
    {
        sPTTMode=!sPTTMode;
        initLED(PTTMode_LED, sPTTMode);
        if(DebugMode | DebugMMode) printf("PTTMode Change	[%d]	[HOLD:[0] TOGGLE:[1]]\x0a", sPTTMode);
    }

    //TOGGLE: External/Internal Voice
    int initTogglePTTMode()
    {
        sPTTState=!sPTTState;
        initLED(PTT_LED, sPTTState);
        if(DebugMode | DebugMMode) printf("Mic Change		[%d]	[External:[0]Internal:[1]]\x0a", sPTTState);
    }

    //FUNCTION: Voice PTT
    int initVoicePTT()
    {
        if     (sPTTState) vPTT = InternalVoiceCommsPTT;	//External Mic
        else if(!sPTTState)vPTT = ExternalVoiceCommsPTT;	//Internal Mic
        if(Throttle[MSP]){
            vVoicePTT=!vVoicePTT;
            if(sPTTMode){	//TOGGLE
                vVoice=!vVoice;
                ActKey(KEYON+Pulse+vPTT);
                if(DebugMode) printf("Mic Toggle [%d] [Actived[1] DesActived[0] / PTT [%d] [External:[0]Internal:[1]] / Mode [%d] [HOLD:[0] TOGGLE:[1]]\x0a", vVoicePTT, sPTTState, sPTTMode);
            }
            else ActKey(KEYON+DOWN+vPTT);	//Talk [HOLD]
        }
        if(!Throttle[MSP] & !sPTTMode){	//Silence [HOLD]
            vVoicePTT=!vVoicePTT;
            ActKey(KEYON+UP+vPTT);
        }
        initLED(VoicePTT_LED, vVoicePTT);
        if(DebugMode & !sPTTMode) printf("Mic Toggle [%d] [Actived[1] DesActived[0] / PTT [%d] [External:[0]Internal:[1]] / Mode [%d] PUSH:[0] TOGGLE:[1]]\x0a", vVoicePTT, sPTTState, sPTTMode);
    }

//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
// 5. START-UP: REPORT SCRIPT STATES //                                                                                                                         //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

    int initPrintState()
    {                                                                           // Display the status of the macro toggles & user prefs on run.
        printf("-----------------------------------------------------------------------------------------------------------------------------------------------\x0a");
        printf(">> SC BINDINGS LOADING:	v%d.%d.%d	  Phobik Mappings, Macros & Functions       <|>\x0a", ADVersionMajor, ADVersionMinor, ADVersionPoint);
        printf("-----------------------------------------------------------------------------------------------------------------------------------------------\x0a");
        printf(":....USER PREFERENCES....:\x0a");
        printf("[MFD Active  = %d]\x0a",  UseMFD);
        printf("[Chaff @ Escape  = %d]  [Boost @ Esc = %d]\x0a", AutoChaffOnEscape, AutoBoostOnEscape);
        printf("[Combine External Mic = %d]  [Ext Mic+Mic = %d]\x0a", ExternalMicCombined, ExternalMicCombined);
        printf("[Headtrak Center Mode = %d]  [LED Backlight = %d]  [LED Bling! = %d]\x0a", HeadtrackPref, SetLED, LEDBling);
        printf("\x0a"); 
        printf(":..DEFAULT TOGGLE STATE..:\x0a");
        printf("[Combine Pri+Sec Fire = %d]  \x0a", combinePriSecFire);
        printf("-----------------------------------------------------------------------------------------------------------------------------------------------\x0a");
        printf("   * * * NOTE! IF PSB was flipped on at startup, center it to PSM.\x0a");
        printf("   * * * NOTE: If Trigger fires Group 2 and you wanted Group 1, flip RDR ALTM switch to NRM.\x0a");
        printf("   * * * NOTE! If you want SPDF Afterburner to work as a toggle instead of a switch, set EFLNORM\x0a");
        printf("Starting Macros... "); }


//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//  EXTRA FUNCTIONS                                                                                                                                             //
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//

//FUNCTION FPS & CONNECTION STATUS
    int initFPSCONNECTION(){
        ActKey(KEYON+PULSE+ShowFramerate);
        if(DebugMode) printf("FPS STATUS\x0a");
    }

//FUNCTION: Head Center
    int initHeadCenter(){
        if(HMD){
            ActKey(KEYON+PULSE+HMDCenter);
            if(DebugMode) printf("HMD Center\x0a");
        }
        else if(TrackIR){
            ActKey(KEYON+PULSE+TrackIRCenter);
            if(DebugMode) printf("TrackIR Center\x0a");
        }
        else{
            ActKey(KEYON+PULSE+UIFocus);
            if(DebugMode) printf("UI Focus\x0a");
        }
    }

//FUNCTION: Capture Video
    int initCaptureVideo(){
        if(GFXVideo == 1){	//Nvidia Shadowplay
            sNVidiaCaptureVideo=!sNVidiaCaptureVideo;
            ActKey(KEYON+PULSE+NVidiaCaptureVideo);
            initLED(NVidiaCaptureVideo_LED, sNVidiaCaptureVideo);
            if(DebugMode | DebugMMode) printf("NVidia ShadowPlay Capture Video [%d]\x0a", sNVidiaCaptureVideo);
        }
        else if(GFXVideo == 2){	//AMD Relive
            sAMDCaptureVideo=!sAMDCaptureVideo;
            ActKey(KEYON+PULSE+AMDCaptureVideo);
            initLED(AMDCaptureVideo_LED, sAMDCaptureVideo);
            if(DebugMode | DebugMMode) printf("AMD Relive Capture Video [%d]\x0a", sAMDCaptureVideo);
        }
        else{
            if(DebugMode | DebugMMode) printf("No Software selected for Capture Video\x0a");	//None
        }
    }

//FUNCTION: Streaming Video
    int initStreamingVideo(){
        if(GFXVideo == 1){	//Nvidia Shadowplay
            sNVidiaStreaming=!sNVidiaStreaming;
            ActKey(KEYON+PULSE+NVidiaStreaming);
            initLED(NVidiaStreaming_LED, sNVidiaStreaming);
            if(DebugMode | DebugMMode) printf("NVidia ShadowPlay Streaming [%d]\x0a", sNVidiaStreaming);
        }
        else if(GFXVideo == 2){	//AMD Relive
            sAMDStreaming=!sAMDStreaming;
            ActKey(KEYON+PULSE+AMDStreaming);
            initLED(AMDStreaming_LED, sAMDStreaming);
            if(DebugMode | DebugMMode) printf("AMD Relive Streaming [%d]\x0a", sAMDStreaming);
        }
        else{
            if(DebugMode | DebugMMode) printf("No Software selected for Streaming Video\x0a");	//None
        }
    }

//FUNCTION: Screenshot
    int initScreenshot(){
        if(!UseSteamScreenshot){
            ActKey(KEYON+PULSE+Screenshot);
            if(DebugMode | DebugMMode) printf("Screenshot\x0a");
        }
        else{
            ActKey(KEYON+PULSE+TakeSteamScreenshot);
            if(DebugMode | DebugMMode) printf("Steam Screenshot\x0a");
        }
    }